function databd = readbd(file,varargin)
%
% databd = readbd(file,varargin)
%
% Read data from bifurcation data file like allinfo.data generated by
% XPPAUT/AUTO. It is often recommended to polish bifurcation data first by
% POLISHBD and then pass these latter to READBD.
%
% Input arguments:
% - file     : String like <filename>.dat
% - varargin :   Use 'option',<val> for optional input arguments (see ProduceCorrectVarargin).
%   Accepted 'option' strings are: 
%   + par1       : {4} | 3   Main bifurcation par column in DAT file (>=v8.0 is 4; <v8.0 is 3)
%   + per        : {6} | 5 Period Column in DAT file (>=v7.0 is 6; <v7.0 is 5) 
%   + mergefirst : 0 | {1} (Orbits only) Join first point of the set with 
%                  last of previous set. Set it to 0 to turn it off.
%   + mergelast  : 0 | {1} (Orbits only) Join last point of the set with 
%                  first of following set. Set it to 0 to turn it off.
%
% Returns:
% - databd : bifurcation data structure to plot bifurcation diagram by
%            PLOTBD
%
% see also POLISHBD, PLOTBD, PRODUCECORRECTVARARGIN.
%
% v2.0
% Solved issue of extra column in DAT file. Allows user to specify in case 
% Period column in DAT file for backcompatibility with XPPAUT <=v7.0.
% Also added handling of main bifurcation parameter par1 (XPPAUT >=8.0 it
% is the 4th column before it used to be 3rd).
% Maurizio De Pitta', The University of Chicago, Chicago, October 12th, 2016.
%
% v1.1
% Revised and debugged. Added help.
% Maurizio De Pitta', The University of Chicago, Chicago, April 28th, 2016.
% 
% v1.0
% Maurizio De Pitta', Tel Aviv University, Tel Aviv, Israel, January 28th, 2012.
% 
% https://sites.google.com/site/mauriziodepitta/home
% maurizio.depitta@gmail.com

% Default
opts.par1 = 4;       % Main bifurcation parameter column (XPPAUT version=>8.0 it is 4; XPPAUT version<7.0 it used to be 3
opts.per = 6;        % Period column (XPPAUT version=>7.0 it is 6; XPPAUT version<7.0 it used to be 5
opts.mergefirst = 1; % Orbits only: join 1st point of the set with last of previous set / set it to 0 to turn it off
opts.mergelast = 1;  % Orbits only: join last point of the set with first of following set / set it to 0 to turn it off

% User-defined options
if ~isempty(varargin)
    varargin = ProduceCorrectVarargin(varargin);
    for i = 1:length(varargin)/2
        if isfield(opts,varargin{2*i-1})
            opts.(genvarname(varargin{2*i-1})) = varargin{2*i};
        end
    end
end

% Load data in the workspace
data = load(file);

% Retrieve useful information on the system from data
% Value are hard-coded according to what specified in the XPPAUT book.
databd.eqs = (size(data,2)-opts.per)/4;
databd.par1 = opts.par1;
databd.par2 = databd.par1+1;
databd.per = opts.per;

% Look for branches and set of points (w/ no a-priori distinction)
i = 1;
iset = 1;
while i<=size(data,1)
    % index of first element in the branch
    index0 = i;
    % running index for scanning branch
    j = index0+1;
    % Condition to identify a branch is that branch type and branch number
    % are the same
%     while (j<=size(data,1))&(data(j,1)==data(index0,1))
    while (j<=size(data,1))&(data(j,1)==data(index0,1) & data(j,2)==data(index0,2))
        j = j+1;
    end
    % last element in the branch
    indexf = j-1;
    % save recognized 'branch' or set of points of the same branch
    databd.pts{iset} = data(index0:indexf,:);
    % Classifies points, according to point type in the first data column
    databd.type{iset} = PointType(data(index0,1));
    % update 'master' index along data
    % OLD
    % i = j+1;
    i = j;
    % udate 'branch' index of auxdata
    iset = iset + 1;
end

% Trick on data: include in the data sets the first and the last points of 
% the contiguous sets (yet only if the branch number is the same). Treat
% 'se' and 'ue' separately wrt 'so' and 'uo'
if opts.mergefirst==1 | opts.mergelast==1
    for i = 1:size(databd.pts,2)
        % Equilbria
        if strcmp(databd.type{i},'se')||strcmp(databd.type{i},'ue')
            % Merge 1st point with last point of previous set
            if i>1 & opts.mergefirst==1 & databd.pts{i}(1,2)==databd.pts{i-1}(end,2)
                if strcmp(databd.type{i-1},'se')||strcmp(databd.type{i-1},'ue')
                    databd.pts{i} = vertcat(databd.pts{i-1}(end,:),databd.pts{i});
                end
            end
            % Merge last point with 1st point of next set
            if i<size(databd.pts,2) & opts.mergelast==1 & databd.pts{i}(end,2)==databd.pts{i+1}(1,2)
                if strcmp(databd.type{i+1},'se')||strcmp(databd.type{i+1},'ue')
                    databd.pts{i} = vertcat(databd.pts{i},databd.pts{i+1}(1,:));
                end
            end
        end

        % Orbits
        if strcmp(databd.type{i},'so')||strcmp(databd.type{i},'uo')
            % Merge 1st point with last point of previous set
            if i>1 & opts.mergefirst==1 & databd.pts{i}(1,2)==databd.pts{i-1}(end,2)
                if strcmp(databd.type{i-1},'so')||strcmp(databd.type{i-1},'uo')
                    databd.pts{i} = vertcat(databd.pts{i-1}(end,:),databd.pts{i});
                end
            end
            % Merge last point with 1st point of next set
            if i<size(databd.pts,2) & opts.mergelast==1 & databd.pts{i}(end,2)==databd.pts{i+1}(1,2)
                if strcmp(databd.type{i+1},'so')||strcmp(databd.type{i+1},'uo')
                    databd.pts{i} = vertcat(databd.pts{i},databd.pts{i+1}(1,:));
                end
            end
        end
    end
end

%--------------------------------------------------------------------------
% Auxiliary functions
%--------------------------------------------------------------------------
function label = PointType(ptype)
% Classifies the sets of points on the basis of point type in the first
% column of data
%
% Maurizio De Pitta', Tel Aviv, January 28th, 2012.
switch ptype
    case 1
        % Stable equilibrium points
        label = 'se';
    case 2
        % Unstable equilibrium points
        label = 'ue';
    case 3
        % Stable orbit point
        label = 'so';
    case 4
        % Unstable orbit point
        label = 'uo';
    otherwise
        error('Unrecognized point type::Looks like you need to update your software!');
end
